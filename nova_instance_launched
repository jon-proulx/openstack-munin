#!/usr/bin/env python
#
# Plugin to monitor instances launched from beginning of time
# Presented as launches per minute
# To monitor a floating ips, link floating_ips to this file.
# E.g.
#    ln -s /usr/share/munin/plugins/nova_instance_launched /etc/munin/plugins/
#
# Needs following minimal configuration in plugin-conf.d/nova:
#   [nova_*]
#   user nova
#
# Magic markers
#%# capabilities=autoconf
#%# family=auto

import sys

try:
    from nova import context
    from nova import db
    from nova import flags
    from nova import utils
    from nova.db.sqlalchemy.session import get_session
except ImportError:
    succesful_import = False
else:
    succesful_import = True

def print_config():
    global states
    print 'graph_title Nova Instances Launched'
    print 'graph_vlabel launches / minute'
    print 'graph_args --base 1000'
    print 'graph_category nova'
    print 'graph_info Instances launched per minute'
    print 'graph_scale no'
    print 'instances.label instances'
    print 'instances.draw LINE2'
    print 'instances.type COUNTER'
    # multiply by 60 to give launces per minute rather thna per second
    print 'instances.cdef instances,60,*'

def get_status():
    connection = get_session().connection()
    row = connection.execute("select count(*) from instances").fetchall()[0]
    return row[0]

def print_values():
    qty = get_status()
    print "instances.value %s" % qty

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config()
        elif sys.argv[1]=="autoconf" :
            if not succesful_import:  
                print 'no (failed import nova module)'
                sys.exit(0)
            else:
                print 'yes'
    elif succesful_import:
        print 'successful'
        #utils.default_flagfile()
        flags.parse_args(sys.argv)
        #flags.FLAGS(sys.argv)       
        print_values()
